box:
  id: maven:3.5.4-jdk-9
  ports:
    - 8080

dev:
  steps:
    - script:
        name: info/env
        code: env
    - internal/watch:
        name: Run and Watch
        code: |
          mvn exec:java
        reload: true

build:
  steps:
    - script:
        name: info/env
        code: env
    - script:
        name: maven build
        code: |
          mvn package -DskipTests

integration-test:
  steps:
    - script:
        name: Run and IT
        code: |
          mvn test

push-to-releases:
  steps:
    - internal/docker-build: 
        dockerfile: Dockerfile 
        image-name: cowweb-interim # name used to refer to this image until it's pushed   

    - internal/docker-push:
        image-name: cowweb-interim
        username: $REGISTRY_USERNAME
        password: $REGISTRY_PASSWORD
        repository: $OCIR_REGION.ocir.io/$OCIR_TENANCY/$OCIR_REPOSITORY/cowweb
        tag: v1.0

deploy-to-cluster:
  box:
    id: alpine
    cmd: /bin/sh
  steps:
    - script:
        name: replace ocir params
        code: |
          sed -e "s/_OCIR_REGION_/$OCIR_REGION/g" -e "s/_OCIR_TENANCY_/$OCIR_TENANCY/g" -e "s/_OCIR_REPOSITORY_/$OCIR_REPOSITORY/g" kubernetes/cowweb.yaml > kubernetes/cowweb_deploy.yaml
          cat kubernetes/cowweb_deploy.yaml
    
    - kubectl:
        name: connection testing
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: get nodes

    - kubectl:
        name: delete objects
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete deployments,services -l app=cowweb --namespace=$COWWEB_NAMESPACE

    - script:
       name: wait to delete resources
       code: sleep 20

    - kubectl:
        name: create deploymnet
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/kubernetes/cowweb_deploy.yaml --namespace=$COWWEB_NAMESPACE

    - kubectl:
        name: create nodeport
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/kubernetes/cowweb-service-nodeport.yaml --namespace=$COWWEB_NAMESPACE

    - kubectl:
        name: get LoadBalancer public IP address
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: get service -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --namespace=$COWWEB_NAMESPACE
